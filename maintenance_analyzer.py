#!/usr/bin/env python3
"""
BakÄ±m Analizi AracÄ±
CSV dosyasÄ±ndan RUL deÄŸerlerini okuyup bakÄ±m kararlarÄ± verir.
"""

import argparse
import pandas as pd
import sys
from pathlib import Path
from maintenance import maintenance_decision


def analyze_maintenance_from_csv(csv_file, rul_column="RUL", output_file=None):
    """CSV dosyasÄ±ndan bakÄ±m analizi yap"""
    
    try:
        # CSV dosyasÄ±nÄ± oku
        df = pd.read_csv(csv_file)
        
        if rul_column not in df.columns:
            print(f"Hata: '{rul_column}' sÃ¼tunu bulunamadÄ±!")
            print(f"Mevcut sÃ¼tunlar: {list(df.columns)}")
            return False
        
        # Her RUL deÄŸeri iÃ§in bakÄ±m kararÄ± ver
        results = []
        for index, row in df.iterrows():
            rul_value = row[rul_column]
            decision = maintenance_decision(rul_value)
            
            result = {
                'index': index,
                'rul': rul_value,
                'status': decision['status'],
                'message': decision['message'],
                'color': decision['color']
            }
            results.append(result)
        
        # SonuÃ§larÄ± DataFrame'e Ã§evir
        results_df = pd.DataFrame(results)
        
        # Ä°statistikleri hesapla
        status_counts = results_df['status'].value_counts()
        total_count = len(results_df)
        
        print(f"ğŸ“Š BakÄ±m Analizi SonuÃ§larÄ± ({csv_file})")
        print("=" * 60)
        print(f"Toplam kayÄ±t sayÄ±sÄ±: {total_count}")
        print("\nDurum daÄŸÄ±lÄ±mÄ±:")
        for status, count in status_counts.items():
            percentage = (count / total_count) * 100
            print(f"  {status:8}: {count:4d} ({percentage:5.1f}%)")
        
        # Kritik durumlarÄ± listele
        critical_cases = results_df[results_df['status'] == 'CRITICAL']
        if not critical_cases.empty:
            print(f"\nğŸš¨ Acil bakÄ±m gereken kayÄ±tlar ({len(critical_cases)} adet):")
            for _, case in critical_cases.head(10).iterrows():
                print(f"  Index {case['index']:3d}: RUL = {case['rul']:6.1f}")
            if len(critical_cases) > 10:
                print(f"  ... ve {len(critical_cases) - 10} adet daha")
        
        # Dosyaya kaydet
        if output_file:
            results_df.to_csv(output_file, index=False)
            print(f"\nğŸ’¾ SonuÃ§lar kaydedildi: {output_file}")
        
        return True
        
    except Exception as e:
        print(f"Hata: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(
        description='CSV dosyasÄ±ndan bakÄ±m analizi yapar',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ã–rnekler:
  python maintenance_analyzer.py data.csv
  python maintenance_analyzer.py data.csv --rul-column remaining_life
  python maintenance_analyzer.py data.csv --output results.csv
        """
    )
    
    parser.add_argument('csv_file', help='Analiz edilecek CSV dosyasÄ±')
    parser.add_argument('--rul-column', default='RUL', help='RUL deÄŸerlerinin bulunduÄŸu sÃ¼tun adÄ± (default: RUL)')
    parser.add_argument('--output', help='SonuÃ§larÄ±n kaydedileceÄŸi CSV dosyasÄ±')
    
    args = parser.parse_args()
    
    # Dosya var mÄ± kontrol et
    if not Path(args.csv_file).exists():
        print(f"Hata: '{args.csv_file}' dosyasÄ± bulunamadÄ±!")
        return 1
    
    # Analizi Ã§alÄ±ÅŸtÄ±r
    success = analyze_maintenance_from_csv(args.csv_file, args.rul_column, args.output)
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())
